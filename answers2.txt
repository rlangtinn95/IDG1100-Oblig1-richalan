6. What is the octal representation of a file that can be read and written only by its owner?

600

7. In UNIX systems, what is the common name of the special user that can access and modify every
file?

superuser, i.e. root

8. Which file permission classes are available in UNIX systems?

Read, write and execute

9. As of 2020, which percentage of servers have UNIX-like OS?

About 67%

10. The command ssh will:

The ssh command command provides a secure encrypted connection between two hosts over an insecure network

11. UNIX Command: access your current working directory

pwd

12. UNIX Command: rename files (give an example)

mv

13. UNIX Command: schedule the execution of programs in the future

crontab

14. UNIX Command: Forcefully shutdown the command with process ID 123

kill

15. UNIX Command: access your root user

su

16. Crontab scheduled: At minute 30 on Sunday.

crontab: 30 * * * Sun

17. Crontab scheduled: At minute 30 on day-of-month 15.

crontab: 30 * 15 * *

18. Crontab scheduled: At 05:30 on every day-of-week from Sunday through Monday in June.

30 5 * 6 0-1

19. Script: print your name and date

echo "Richard $(date)"


20. Script: add two numeric values, print the result

read -p "Please enter first number: " 3
read -p "Please enter second number: " 5
echo "The total is: " $((3+5))


21. Script: inputs username, prints “USERNAME stored”

read -p "Please enter your username:" username 
echo "Username stored"
echo $username

22. Script: Store the output of the command “hostname” in a variable. Display “This script is
running on _.” where “_” is the output of the “hostname” command.

echo "this script is running on ($hostname)"



23. Script: Store the output of the working directory (from where the script is run) in a variable
then print the variable.

directory =$(pwd)
echo $dierectory



24. Create a step by step tutorial on how to create a cronjob that prints “Task scheduled at” +
DATE. Cronjob is scheduled every 30 minutes on today’s date (only today).

1. Open a Terminal Window. 
2. crontab: 30 * 17 11 2 “At minute 30 on day-of-month 17 and on Tuesday in November.”
3. Create a new shellscript named for example task.sh 
4. echo "todays date"
5. assign to a txt file: >> /home/exapmle1.txt
the line will look like this: "task * 17 11 * echo "task scheduled at $(date)" >> /home/example1.txt
6. navigate to /home, and touch a file named example1.txt
7. start the cron service: service cron start
8. cat the example1.txt file to view the output


25. Create a script that takes an input (letter or number) that will display the answer of a question.
The script should when started list a menu for the user with the different questions that can be
chosen and which corresponding letter the user will have to give as input to display the answer of
the desired question. One of the possible inputs the user should be able to make is "q" for quitting
the script. The menu should also have a default case where all the items is displayed again, or no
changes is made if the user gives an invalid input. Hint: use a switch case to be able to handle the
menu. Each option in the menu should lead to an echo of the answer